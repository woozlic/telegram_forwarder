import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from config import logger, get_config
import db  # –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SOURCE, DESTINATION = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        return
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}!\n\n'
        f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        f'/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
        f'/add - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n'
        f'/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n'
        f'/remove - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    )


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in whitelist_ids:
        return ConversationHandler.END

    await update.message.reply_text(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ò–°–¢–û–ß–ù–ò–ö–ê (–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å):"
    )
    return SOURCE


async def source_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞
    if not update.message.forward_from_chat:
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞."
        )
        return SOURCE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    context.user_data['source_id'] = str(update.message.forward_from_chat.id)

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø (–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å):"
    )
    return DESTINATION


async def destination_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.forward_from_chat:
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞."
        )
        return DESTINATION

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    source_id = context.user_data['source_id']
    destination_id = str(update.message.forward_from_chat.id)
    user_id = str(update.effective_user.id)

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        await db.add_subscription(source_id, destination_id, user_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_id}\n"
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination_id}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END


async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        return

    user_id = str(update.effective_user.id)
    try:
        subscriptions = await db.get_subscriptions(user_id=user_id)
        if not subscriptions:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        response = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for sub in subscriptions:
            response += (
                f"ID: {sub['id']}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {sub['source_id']}\n"
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {sub['destination_id']}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {sub['created_date']}\n\n"
            )
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (ID –ø–æ–¥–ø–∏—Å–∫–∏)
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove 5")
        return

    try:
        sub_id = int(context.args[0])
        user_id = str(update.effective_user.id)

        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        deleted = await db.delete_subscription_by_user(sub_id, user_id)

        if deleted:
            await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ {sub_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."
            )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <ID>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
    """
    channel_post = update.channel_post
    if not channel_post:
        return

    chat_id = str(channel_post.chat.id)

    try:
        subscriptions = await db.get_subscriptions(chat_id)

        if not subscriptions:
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id} –¥–ª—è {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")

        for subscription in subscriptions:
            try:
                await channel_post.forward(
                    chat_id=subscription["destination_id"],
                    message_thread_id=channel_post.message_thread_id
                )
                logger.debug(f"–ü–æ—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ {subscription['destination_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ—Å—Ç–∞ –≤ {subscription['destination_id']}: {e}")
                try:
                    await context.bot.copy_message(
                        chat_id=subscription["destination_id"],
                        from_chat_id=channel_post.chat_id,
                        message_id=channel_post.message_id,
                        message_thread_id=channel_post.message_thread_id
                    )
                    logger.debug(f"–ü–æ—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {subscription['destination_id']}")
                except Exception as copy_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {copy_error}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤
    """
    message = update.effective_message
    source = update.effective_chat

    logger.info(f"Received message from chat: {source.id} (type: {source.type})")

    chat_id = str(message.chat.id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        subscriptions = await db.get_subscriptions_by_source(chat_id)

        if not subscriptions:
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_id}: {message}")

        # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        for subscription in subscriptions:
            try:
                await message.forward(
                    chat_id=subscription["destination_id"],
                    message_thread_id=message.message_thread_id
                )
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {subscription['destination_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ {subscription['destination_id']}: {e}")
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    await context.bot.copy_message(
                        chat_id=subscription["destination_id"],
                        from_chat_id=message.chat_id,
                        message_id=message.message_id,
                        message_thread_id=message.message_thread_id
                    )
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {subscription['destination_id']}")
                except Exception as copy_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ {subscription['destination_id']}: {copy_error}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
logger.info("Bot started")
config_dict = get_config()
bot_token = config_dict['bot_token']
whitelist_ids = config_dict['whitelist_ids']

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('add', add_command)],
    states={
        SOURCE: [
            MessageHandler(
                filters.FORWARDED & filters.ChatType.PRIVATE,
                source_step
            )
        ],
        DESTINATION: [
            MessageHandler(
                filters.FORWARDED & filters.ChatType.PRIVATE,
                destination_step
            )
        ],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
)

app = ApplicationBuilder().token(bot_token).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("list", list_command))
app.add_handler(CommandHandler("remove", remove_command))
app.add_handler(conv_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
app.add_handler(MessageHandler(
    filters.ChatType.CHANNEL | filters.ChatType.GROUP | filters.ChatType.SUPERGROUP
    & ~filters.COMMAND
    & ~filters.StatusUpdate.ALL,
    handle_message
))


app.run_polling(
    drop_pending_updates=True,
    allowed_updates=["message", "channel_post", "edited_message"]
)